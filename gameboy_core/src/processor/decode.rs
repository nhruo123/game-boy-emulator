use super::registers::Reg16::{AF, BC, DE, HL, SP};
use super::registers::Reg8::{A, B, C, D, E, H, L};
use crate::mmu::Mmu;
use crate::processor::*;
use crate::processor::TCycles;
use crate::processor::FETCH_T_CYCLES;

pub trait In8<T: Copy> {
	fn read(&mut self, src: T, mmu: &mut Mmu) -> (u8, TCycles);
}

pub trait Out8<T: Copy> {
	fn write(&mut self, dst: T, mmu: &mut Mmu, val: u8) -> TCycles;
}

#[derive(Clone, Copy, Debug)]
pub struct Immediate8;

#[derive(Clone, Copy, Debug)]
pub enum Addr {
	BC,
	DE,
	HL,
	HLD,
	HLI,
	Immediate16,
	ZeroPage,
	ZeroPageAndC,
}

#[derive(Clone, Copy, Debug)]
pub enum Condition {
	NZ,
	Z,
	NC,
	C,
}

impl Processor {
	pub fn test_condition(&self, condition: Condition) -> bool {
		match condition {
			Condition::NZ => !self.registers.zf(),
			Condition::Z => self.registers.zf(),
			Condition::NC => !self.registers.cf(),
			Condition::C => self.registers.cf(),
		}
	}

	// this function was created using https://github.com/lmmendes/game-boy-opcodes
	pub fn cycle(&mut self, mmu: &mut Mmu) -> TCycles {
		if self.halt {
			return FETCH_T_CYCLES;
		}

		let opcode = self.fetch_byte(mmu);

		match opcode {
			0x00 => self.nop(),
			0x01 => self.load16_imm(mmu, BC),
			0x02 => self.load(mmu, Addr::BC, A),
			0x03 => self.inc16(BC),
			0x04 => self.inc(mmu, B),
			0x05 => self.dec(mmu, B),
			0x06 => self.load(mmu, B, Immediate8),
			0x07 => self.rlca(),
			0x08 => self.load16_nn_sp(mmu),
			0x09 => self.add16(BC),
			0x0a => self.load(mmu, A, Addr::BC),
			0x0b => self.dec16(BC),
			0x0c => self.inc(mmu, C),
			0x0d => self.dec(mmu, C),
			0x0e => self.load(mmu, C, Immediate8),
			0x0f => self.rrca(),
			0x10 => self.stop(),
			0x11 => self.load16_imm(mmu, DE),
			0x12 => self.load(mmu, Addr::DE, A),
			0x13 => self.inc16(DE),
			0x14 => self.inc(mmu, D),
			0x15 => self.dec(mmu, D),
			0x16 => self.load(mmu, D, Immediate8),
			0x17 => self.rla(),
			0x18 => self.jr(mmu),
			0x19 => self.add16(DE),
			0x1a => self.load(mmu, A, Addr::DE),
			0x1b => self.dec16(DE),
			0x1c => self.inc(mmu, E),
			0x1d => self.dec(mmu, E),
			0x1e => self.load(mmu, E, Immediate8),
			0x1f => self.rra(),
			0x20 => self.jr_cc(mmu, Condition::NZ),
			0x21 => self.load16_imm(mmu, HL),
			0x22 => self.load(mmu, Addr::HLI, A),
			0x23 => self.inc16(HL),
			0x24 => self.inc(mmu, H),
			0x25 => self.dec(mmu, H),
			0x26 => self.load(mmu, H, Immediate8),
			0x27 => self.daa(),
			0x28 => self.jr_cc(mmu, Condition::Z),
			0x29 => self.add16(HL),
			0x2a => self.load(mmu, A, Addr::HLI),
			0x2b => self.dec16(HL),
			0x2c => self.inc(mmu, L),
			0x2d => self.dec(mmu, L),
			0x2e => self.load(mmu, L, Immediate8),
			0x2f => self.cpl(),
			0x30 => self.jr_cc(mmu, Condition::NC),
			0x31 => self.load16_imm(mmu, SP),
			0x32 => self.load(mmu, Addr::HLD, A),
			0x33 => self.inc16(SP),
			0x34 => self.inc(mmu, Addr::HL),
			0x35 => self.dec(mmu, Addr::HL),
			0x36 => self.load(mmu, Addr::HL, Immediate8),
			0x37 => self.scf(),
			0x38 => self.jr_cc(mmu, Condition::C),
			0x39 => self.add16(SP),
			0x3a => self.load(mmu, A, Addr::HLD),
			0x3b => self.dec16(SP),
			0x3c => self.inc(mmu, A),
			0x3d => self.dec(mmu, A),
			0x3e => self.load(mmu, A, Immediate8),
			0x3f => self.ccf(),
			0x40 => self.load(mmu, B, B),
			0x41 => self.load(mmu, B, C),
			0x42 => self.load(mmu, B, D),
			0x43 => self.load(mmu, B, E),
			0x44 => self.load(mmu, B, H),
			0x45 => self.load(mmu, B, L),
			0x46 => self.load(mmu, B, Addr::HL),
			0x47 => self.load(mmu, B, A),
			0x48 => self.load(mmu, C, B),
			0x49 => self.load(mmu, C, C),
			0x4a => self.load(mmu, C, D),
			0x4b => self.load(mmu, C, E),
			0x4c => self.load(mmu, C, H),
			0x4d => self.load(mmu, C, L),
			0x4e => self.load(mmu, C, Addr::HL),
			0x4f => self.load(mmu, C, A),
			0x50 => self.load(mmu, D, B),
			0x51 => self.load(mmu, D, C),
			0x52 => self.load(mmu, D, D),
			0x53 => self.load(mmu, D, E),
			0x54 => self.load(mmu, D, H),
			0x55 => self.load(mmu, D, L),
			0x56 => self.load(mmu, D, Addr::HL),
			0x57 => self.load(mmu, D, A),
			0x58 => self.load(mmu, E, B),
			0x59 => self.load(mmu, E, C),
			0x5a => self.load(mmu, E, D),
			0x5b => self.load(mmu, E, E),
			0x5c => self.load(mmu, E, H),
			0x5d => self.load(mmu, E, L),
			0x5e => self.load(mmu, E, Addr::HL),
			0x5f => self.load(mmu, E, A),
			0x60 => self.load(mmu, H, B),
			0x61 => self.load(mmu, H, C),
			0x62 => self.load(mmu, H, D),
			0x63 => self.load(mmu, H, E),
			0x64 => self.load(mmu, H, H),
			0x65 => self.load(mmu, H, L),
			0x66 => self.load(mmu, H, Addr::HL),
			0x67 => self.load(mmu, H, A),
			0x68 => self.load(mmu, L, B),
			0x69 => self.load(mmu, L, C),
			0x6a => self.load(mmu, L, D),
			0x6b => self.load(mmu, L, E),
			0x6c => self.load(mmu, L, H),
			0x6d => self.load(mmu, L, L),
			0x6e => self.load(mmu, L, Addr::HL),
			0x6f => self.load(mmu, L, A),
			0x70 => self.load(mmu, Addr::HL, B),
			0x71 => self.load(mmu, Addr::HL, C),
			0x72 => self.load(mmu, Addr::HL, D),
			0x73 => self.load(mmu, Addr::HL, E),
			0x74 => self.load(mmu, Addr::HL, H),
			0x75 => self.load(mmu, Addr::HL, L),
			0x76 => self.halt(),
			0x77 => self.load(mmu, Addr::HL, A),
			0x78 => self.load(mmu, A, B),
			0x79 => self.load(mmu, A, C),
			0x7a => self.load(mmu, A, D),
			0x7b => self.load(mmu, A, E),
			0x7c => self.load(mmu, A, H),
			0x7d => self.load(mmu, A, L),
			0x7e => self.load(mmu, A, Addr::HL),
			0x7f => self.load(mmu, A, A),
			0x80 => self.add(mmu, B),
			0x81 => self.add(mmu, C),
			0x82 => self.add(mmu, D),
			0x83 => self.add(mmu, E),
			0x84 => self.add(mmu, H),
			0x85 => self.add(mmu, L),
			0x86 => self.add(mmu, Addr::HL),
			0x87 => self.add(mmu, A),
			0x88 => self.adc(mmu, B),
			0x89 => self.adc(mmu, C),
			0x8a => self.adc(mmu, D),
			0x8b => self.adc(mmu, E),
			0x8c => self.adc(mmu, H),
			0x8d => self.adc(mmu, L),
			0x8e => self.adc(mmu, Addr::HL),
			0x8f => self.adc(mmu, A),
			0x90 => self.sub(mmu, B),
			0x91 => self.sub(mmu, C),
			0x92 => self.sub(mmu, D),
			0x93 => self.sub(mmu, E),
			0x94 => self.sub(mmu, H),
			0x95 => self.sub(mmu, L),
			0x96 => self.sub(mmu, Addr::HL),
			0x97 => self.sub(mmu, A),
			0x98 => self.sbc(mmu, B),
			0x99 => self.sbc(mmu, C),
			0x9a => self.sbc(mmu, D),
			0x9b => self.sbc(mmu, E),
			0x9c => self.sbc(mmu, H),
			0x9d => self.sbc(mmu, L),
			0x9e => self.sbc(mmu, Addr::HL),
			0x9f => self.sbc(mmu, A),
			0xa0 => self.and(mmu, B),
			0xa1 => self.and(mmu, C),
			0xa2 => self.and(mmu, D),
			0xa3 => self.and(mmu, E),
			0xa4 => self.and(mmu, H),
			0xa5 => self.and(mmu, L),
			0xa6 => self.and(mmu, Addr::HL),
			0xa7 => self.and(mmu, A),
			0xa8 => self.xor(mmu, B),
			0xa9 => self.xor(mmu, C),
			0xaa => self.xor(mmu, D),
			0xab => self.xor(mmu, E),
			0xac => self.xor(mmu, H),
			0xad => self.xor(mmu, L),
			0xae => self.xor(mmu, Addr::HL),
			0xaf => self.xor(mmu, A),
			0xb0 => self.or(mmu, B),
			0xb1 => self.or(mmu, C),
			0xb2 => self.or(mmu, D),
			0xb3 => self.or(mmu, E),
			0xb4 => self.or(mmu, H),
			0xb5 => self.or(mmu, L),
			0xb6 => self.or(mmu, Addr::HL),
			0xb7 => self.or(mmu, A),
			0xb8 => self.cp(mmu, B),
			0xb9 => self.cp(mmu, C),
			0xba => self.cp(mmu, D),
			0xbb => self.cp(mmu, E),
			0xbc => self.cp(mmu, H),
			0xbd => self.cp(mmu, L),
			0xbe => self.cp(mmu, Addr::HL),
			0xbf => self.cp(mmu, A),
			0xc0 => self.ret_cc(mmu, Condition::NZ),
			0xc1 => self.pop16(mmu, BC),
			0xc2 => self.jp_cc(mmu, Condition::NZ),
			0xc3 => self.jp(mmu),
			0xc4 => self.call_cc(mmu, Condition::NZ),
			0xc5 => self.push16(mmu, BC),
			0xc6 => self.add(mmu, Immediate8),
			0xc7 => self.rst(mmu, 0x00),
			0xc8 => self.ret_cc(mmu, Condition::Z),
			0xc9 => self.ret(mmu),
			0xca => self.jp_cc(mmu, Condition::Z),
			0xcb => self.cb_cycle(mmu),
			0xcc => self.call_cc(mmu, Condition::Z),
			0xcd => self.call(mmu),
			0xce => self.adc(mmu, Immediate8),
			0xcf => self.rst(mmu, 0x08),
			0xd0 => self.ret_cc(mmu, Condition::NC),
			0xd1 => self.pop16(mmu, DE),
			0xd2 => self.jp_cc(mmu, Condition::NC),
			0xd4 => self.call_cc(mmu, Condition::NC),
			0xd5 => self.push16(mmu, DE),
			0xd6 => self.sub(mmu, Immediate8),
			0xd7 => self.rst(mmu, 0x10),
			0xd8 => self.ret_cc(mmu, Condition::C),
			0xd9 => self.reti(mmu),
			0xda => self.jp_cc(mmu, Condition::C),
			0xdc => self.call_cc(mmu, Condition::C),
			0xde => self.sbc(mmu, Immediate8),
			0xdf => self.rst(mmu, 0x18),
			0xe0 => self.load(mmu, Addr::ZeroPage, A),
			0xe1 => self.pop16(mmu, HL),
			0xe2 => self.load(mmu, Addr::ZeroPageAndC, A),
			0xe5 => self.push16(mmu, HL),
			0xe6 => self.and(mmu, Immediate8),
			0xe7 => self.rst(mmu, 0x20),
			0xe8 => self.add16_sp_n(mmu),
			0xe9 => self.jp_hl(),
			0xea => self.load(mmu, Addr::Immediate16, A),
			0xee => self.xor(mmu, Immediate8),
			0xef => self.rst(mmu, 0x28),
			0xf0 => self.load(mmu, A, Addr::ZeroPage),
			0xf1 => self.pop16(mmu, AF),
			0xf2 => self.load(mmu, A, Addr::ZeroPageAndC),
			0xf3 => self.di(),
			0xf5 => self.push16(mmu, AF),
			0xf6 => self.or(mmu, Immediate8),
			0xf7 => self.rst(mmu, 0x30),
			0xf8 => self.load16_hl_sp_n(mmu),
			0xf9 => self.load16_sp_hl(),
			0xfa => self.load(mmu, A, Addr::Immediate16),
			0xfb => self.ei(),
			0xfe => self.cp(mmu, Immediate8),
			0xff => self.rst(mmu, 0x38),

			opcode => self.undefined(opcode),
		}
	}

	pub fn cb_cycle(&mut self, mmu: &mut Mmu) -> TCycles {
		let opcode = self.fetch_byte(mmu);

		match opcode {
			0x00 => self.rlc(mmu, B),
			0x01 => self.rlc(mmu, C),
			0x02 => self.rlc(mmu, D),
			0x03 => self.rlc(mmu, E),
			0x04 => self.rlc(mmu, H),
			0x05 => self.rlc(mmu, L),
			0x06 => self.rlc(mmu, Addr::HL),
			0x07 => self.rlc(mmu, A),
			0x08 => self.rrc(mmu, B),
			0x09 => self.rrc(mmu, C),
			0x0a => self.rrc(mmu, D),
			0x0b => self.rrc(mmu, E),
			0x0c => self.rrc(mmu, H),
			0x0d => self.rrc(mmu, L),
			0x0e => self.rrc(mmu, Addr::HL),
			0x0f => self.rrc(mmu, A),
			0x10 => self.rl(mmu, B),
			0x11 => self.rl(mmu, C),
			0x12 => self.rl(mmu, D),
			0x13 => self.rl(mmu, E),
			0x14 => self.rl(mmu, H),
			0x15 => self.rl(mmu, L),
			0x16 => self.rl(mmu, Addr::HL),
			0x17 => self.rl(mmu, A),
			0x18 => self.rr(mmu, B),
			0x19 => self.rr(mmu, C),
			0x1a => self.rr(mmu, D),
			0x1b => self.rr(mmu, E),
			0x1c => self.rr(mmu, H),
			0x1d => self.rr(mmu, L),
			0x1e => self.rr(mmu, Addr::HL),
			0x1f => self.rr(mmu, A),
			0x20 => self.sla(mmu, B),
			0x21 => self.sla(mmu, C),
			0x22 => self.sla(mmu, D),
			0x23 => self.sla(mmu, E),
			0x24 => self.sla(mmu, H),
			0x25 => self.sla(mmu, L),
			0x26 => self.sla(mmu, Addr::HL),
			0x27 => self.sla(mmu, A),
			0x28 => self.sra(mmu, B),
			0x29 => self.sra(mmu, C),
			0x2a => self.sra(mmu, D),
			0x2b => self.sra(mmu, E),
			0x2c => self.sra(mmu, H),
			0x2d => self.sra(mmu, L),
			0x2e => self.sra(mmu, Addr::HL),
			0x2f => self.sra(mmu, A),
			0x30 => self.swap(mmu, B),
			0x31 => self.swap(mmu, C),
			0x32 => self.swap(mmu, D),
			0x33 => self.swap(mmu, E),
			0x34 => self.swap(mmu, H),
			0x35 => self.swap(mmu, L),
			0x36 => self.swap(mmu, Addr::HL),
			0x37 => self.swap(mmu, A),
			0x38 => self.srl(mmu, B),
			0x39 => self.srl(mmu, C),
			0x3a => self.srl(mmu, D),
			0x3b => self.srl(mmu, E),
			0x3c => self.srl(mmu, H),
			0x3d => self.srl(mmu, L),
			0x3e => self.srl(mmu, Addr::HL),
			0x3f => self.srl(mmu, A),
			0x40 => self.bit(mmu, B, 0),
			0x41 => self.bit(mmu, C, 0),
			0x42 => self.bit(mmu, D, 0),
			0x43 => self.bit(mmu, E, 0),
			0x44 => self.bit(mmu, H, 0),
			0x45 => self.bit(mmu, L, 0),
			0x46 => self.bit(mmu, Addr::HL, 0),
			0x47 => self.bit(mmu, A, 0),
			0x48 => self.bit(mmu, B, 1),
			0x49 => self.bit(mmu, C, 1),
			0x4a => self.bit(mmu, D, 1),
			0x4b => self.bit(mmu, E, 1),
			0x4c => self.bit(mmu, H, 1),
			0x4d => self.bit(mmu, L, 1),
			0x4e => self.bit(mmu, Addr::HL, 1),
			0x4f => self.bit(mmu, A, 1),
			0x50 => self.bit(mmu, B, 2),
			0x51 => self.bit(mmu, C, 2),
			0x52 => self.bit(mmu, D, 2),
			0x53 => self.bit(mmu, E, 2),
			0x54 => self.bit(mmu, H, 2),
			0x55 => self.bit(mmu, L, 2),
			0x56 => self.bit(mmu, Addr::HL, 2),
			0x57 => self.bit(mmu, A, 2),
			0x58 => self.bit(mmu, B, 3),
			0x59 => self.bit(mmu, C, 3),
			0x5a => self.bit(mmu, D, 3),
			0x5b => self.bit(mmu, E, 3),
			0x5c => self.bit(mmu, H, 3),
			0x5d => self.bit(mmu, L, 3),
			0x5e => self.bit(mmu, Addr::HL, 3),
			0x5f => self.bit(mmu, A, 3),
			0x60 => self.bit(mmu, B, 4),
			0x61 => self.bit(mmu, C, 4),
			0x62 => self.bit(mmu, D, 4),
			0x63 => self.bit(mmu, E, 4),
			0x64 => self.bit(mmu, H, 4),
			0x65 => self.bit(mmu, L, 4),
			0x66 => self.bit(mmu, Addr::HL, 4),
			0x67 => self.bit(mmu, A, 4),
			0x68 => self.bit(mmu, B, 5),
			0x69 => self.bit(mmu, C, 5),
			0x6a => self.bit(mmu, D, 5),
			0x6b => self.bit(mmu, E, 5),
			0x6c => self.bit(mmu, H, 5),
			0x6d => self.bit(mmu, L, 5),
			0x6e => self.bit(mmu, Addr::HL, 5),
			0x6f => self.bit(mmu, A, 5),
			0x70 => self.bit(mmu, B, 6),
			0x71 => self.bit(mmu, C, 6),
			0x72 => self.bit(mmu, D, 6),
			0x73 => self.bit(mmu, E, 6),
			0x74 => self.bit(mmu, H, 6),
			0x75 => self.bit(mmu, L, 6),
			0x76 => self.bit(mmu, Addr::HL, 6),
			0x77 => self.bit(mmu, A, 6),
			0x78 => self.bit(mmu, B, 7),
			0x79 => self.bit(mmu, C, 7),
			0x7a => self.bit(mmu, D, 7),
			0x7b => self.bit(mmu, E, 7),
			0x7c => self.bit(mmu, H, 7),
			0x7d => self.bit(mmu, L, 7),
			0x7e => self.bit(mmu, Addr::HL, 7),
			0x7f => self.bit(mmu, A, 7),
			0x80 => self.res(mmu, B, 0),
			0x81 => self.res(mmu, C, 0),
			0x82 => self.res(mmu, D, 0),
			0x83 => self.res(mmu, E, 0),
			0x84 => self.res(mmu, H, 0),
			0x85 => self.res(mmu, L, 0),
			0x86 => self.res(mmu, Addr::HL, 0),
			0x87 => self.res(mmu, A, 0),
			0x88 => self.res(mmu, B, 1),
			0x89 => self.res(mmu, C, 1),
			0x8a => self.res(mmu, D, 1),
			0x8b => self.res(mmu, E, 1),
			0x8c => self.res(mmu, H, 1),
			0x8d => self.res(mmu, L, 1),
			0x8e => self.res(mmu, Addr::HL, 1),
			0x8f => self.res(mmu, A, 1),
			0x90 => self.res(mmu, B, 2),
			0x91 => self.res(mmu, C, 2),
			0x92 => self.res(mmu, D, 2),
			0x93 => self.res(mmu, E, 2),
			0x94 => self.res(mmu, H, 2),
			0x95 => self.res(mmu, L, 2),
			0x96 => self.res(mmu, Addr::HL, 2),
			0x97 => self.res(mmu, A, 2),
			0x98 => self.res(mmu, B, 3),
			0x99 => self.res(mmu, C, 3),
			0x9a => self.res(mmu, D, 3),
			0x9b => self.res(mmu, E, 3),
			0x9c => self.res(mmu, H, 3),
			0x9d => self.res(mmu, L, 3),
			0x9e => self.res(mmu, Addr::HL, 3),
			0x9f => self.res(mmu, A, 3),
			0xa0 => self.res(mmu, B, 4),
			0xa1 => self.res(mmu, C, 4),
			0xa2 => self.res(mmu, D, 4),
			0xa3 => self.res(mmu, E, 4),
			0xa4 => self.res(mmu, H, 4),
			0xa5 => self.res(mmu, L, 4),
			0xa6 => self.res(mmu, Addr::HL, 4),
			0xa7 => self.res(mmu, A, 4),
			0xa8 => self.res(mmu, B, 5),
			0xa9 => self.res(mmu, C, 5),
			0xaa => self.res(mmu, D, 5),
			0xab => self.res(mmu, E, 5),
			0xac => self.res(mmu, H, 5),
			0xad => self.res(mmu, L, 5),
			0xae => self.res(mmu, Addr::HL, 5),
			0xaf => self.res(mmu, A, 5),
			0xb0 => self.res(mmu, B, 6),
			0xb1 => self.res(mmu, C, 6),
			0xb2 => self.res(mmu, D, 6),
			0xb3 => self.res(mmu, E, 6),
			0xb4 => self.res(mmu, H, 6),
			0xb5 => self.res(mmu, L, 6),
			0xb6 => self.res(mmu, Addr::HL, 6),
			0xb7 => self.res(mmu, A, 6),
			0xb8 => self.res(mmu, B, 7),
			0xb9 => self.res(mmu, C, 7),
			0xba => self.res(mmu, D, 7),
			0xbb => self.res(mmu, E, 7),
			0xbc => self.res(mmu, H, 7),
			0xbd => self.res(mmu, L, 7),
			0xbe => self.res(mmu, Addr::HL, 7),
			0xbf => self.res(mmu, A, 7),
			0xc0 => self.set(mmu, B, 0),
			0xc1 => self.set(mmu, C, 0),
			0xc2 => self.set(mmu, D, 0),
			0xc3 => self.set(mmu, E, 0),
			0xc4 => self.set(mmu, H, 0),
			0xc5 => self.set(mmu, L, 0),
			0xc6 => self.set(mmu, Addr::HL, 0),
			0xc7 => self.set(mmu, A, 0),
			0xc8 => self.set(mmu, B, 1),
			0xc9 => self.set(mmu, C, 1),
			0xca => self.set(mmu, D, 1),
			0xcb => self.set(mmu, E, 1),
			0xcc => self.set(mmu, H, 1),
			0xcd => self.set(mmu, L, 1),
			0xce => self.set(mmu, Addr::HL, 1),
			0xcf => self.set(mmu, A, 1),
			0xd0 => self.set(mmu, B, 2),
			0xd1 => self.set(mmu, C, 2),
			0xd2 => self.set(mmu, D, 2),
			0xd3 => self.set(mmu, E, 2),
			0xd4 => self.set(mmu, H, 2),
			0xd5 => self.set(mmu, L, 2),
			0xd6 => self.set(mmu, Addr::HL, 2),
			0xd7 => self.set(mmu, A, 2),
			0xd8 => self.set(mmu, B, 3),
			0xd9 => self.set(mmu, C, 3),
			0xda => self.set(mmu, D, 3),
			0xdb => self.set(mmu, E, 3),
			0xdc => self.set(mmu, H, 3),
			0xdd => self.set(mmu, L, 3),
			0xde => self.set(mmu, Addr::HL, 3),
			0xdf => self.set(mmu, A, 3),
			0xe0 => self.set(mmu, B, 4),
			0xe1 => self.set(mmu, C, 4),
			0xe2 => self.set(mmu, D, 4),
			0xe3 => self.set(mmu, E, 4),
			0xe4 => self.set(mmu, H, 4),
			0xe5 => self.set(mmu, L, 4),
			0xe6 => self.set(mmu, Addr::HL, 4),
			0xe7 => self.set(mmu, A, 4),
			0xe8 => self.set(mmu, B, 5),
			0xe9 => self.set(mmu, C, 5),
			0xea => self.set(mmu, D, 5),
			0xeb => self.set(mmu, E, 5),
			0xec => self.set(mmu, H, 5),
			0xed => self.set(mmu, L, 5),
			0xee => self.set(mmu, Addr::HL, 5),
			0xef => self.set(mmu, A, 5),
			0xf0 => self.set(mmu, B, 6),
			0xf1 => self.set(mmu, C, 6),
			0xf2 => self.set(mmu, D, 6),
			0xf3 => self.set(mmu, E, 6),
			0xf4 => self.set(mmu, H, 6),
			0xf5 => self.set(mmu, L, 6),
			0xf6 => self.set(mmu, Addr::HL, 6),
			0xf7 => self.set(mmu, A, 6),
			0xf8 => self.set(mmu, B, 7),
			0xf9 => self.set(mmu, C, 7),
			0xfa => self.set(mmu, D, 7),
			0xfb => self.set(mmu, E, 7),
			0xfc => self.set(mmu, H, 7),
			0xfd => self.set(mmu, L, 7),
			0xfe => self.set(mmu, Addr::HL, 7),
			0xff => self.set(mmu, A, 7),
		}
	}
}
